//**************************************************************************************************
//
// カメラ処理(camera.h)
// Auther：唐﨑結斗
// 概要 : カメラの設定処理
//
//**************************************************************************************************
#ifndef _CAMERA_GAME_H_			// このマクロ定義がされてなかったら
#define _CAMERA_GAME_H_			// 二重インクルード防止のマクロ定義

//***************************************************************************
// インクルード
//***************************************************************************
#include "main.h"
#include "camera.h"
#include "object.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************

//=============================================================================
// カメラクラス
// Author : 冨所知生
// 概要 : カメラ設定を行うクラス
//=============================================================================
class CObject;
class CCamera_Game : CCamera
{
public:
	//=============================================================================
	// 投影方法のタイプ列挙型
	// Author : 冨所知生
	// 概要 : 投影方法の種別
	//=============================================================================
	enum CAMERA_TYPE
	{
		TYPE_FREE,					// 自由にカメラを動かせる状態
		TYPE_SHOULDER,				// 肩越し視点状態
		MAX_CAMERA_TYPE,			// カメラタイプの最大数
	};

	enum EVENT
	{
		EVENT_NORMAL,
		EVENT_FLY,					// イベント中のカメラ設定
	};

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CCamera_Game();
	~CCamera_Game();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init(D3DXVECTOR3 pos);									// 初期化
	void Uninit(void);												// 終了
	void Update(void);												// 更新
	void UpdateNormal(void);										// 通常処理
	void UpdateRadar(void);											// レーダーの処理
	void Up(void);													// 上に上昇する

	// floatを利用したカメラの制限(結構無理やり)
	bool Limit_Used_Mouse();
	// 設定した目標地点に視点を移動させる処理
	void CameraWork(D3DXQUATERNION que);

	// オブジェクトのモードの設定
	void SetObjMode(CObject::Object_mode mode) { m_Objectmode = mode; }

	//--------------------------------------------------------------------
	// ゲッタ―
	//--------------------------------------------------------------------
	CAMERA_TYPE GetMode() { return m_mode; }						// カメラのモード情報の取得
	D3DVIEWPORT9 GetViewport() { return m_viewport; }				//ビューポートの取得
	CObject::Object_mode GetObjType() { return m_Objectmode; }

private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void FreeMove(void);			// 通常移動
	void ShoulderMove(void);		// 肩越し時の移動 
	void MouseMove(void);			// マウス移動を回転に代入
	void JoyPadMove(void);			// ジョイパッド移動を回転に代入
	void FlightEvent();				// フライトイベント

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CAMERA_TYPE			m_mode;				// カメラのモード
	D3DVIEWPORT9		m_viewport;			// ビューポート
	EVENT				m_event;			// イベント管理
	CObject::Object_mode m_Objectmode;		// オブジェクトのモード


	float				m_Gravity;			// 重力

	bool				m_bWork;			// カメラワークが終了したかしていないか
	bool				m_bUp;				// 上昇しているかしていないか

	int					m_nCntFly;			// 飛行
	int					m_nCntCameraWork;	// カメラワークの終了までの時間
	int					m_nCntMoveSound;	// 移動中の音
};

#endif
